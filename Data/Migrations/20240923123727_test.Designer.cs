// <auto-generated />
using System;
using Data.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(Resolve360Context))]
    [Migration("20240923123727_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Data.Models.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("CommentBody")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<long>("CommentedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("TicketId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CommentedBy");

                    b.HasIndex("TicketId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("Data.Models.Condition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ConditionTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<long>("TransitionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ConditionTypeId");

                    b.HasIndex("TransitionId");

                    b.ToTable("Condition", (string)null);
                });

            modelBuilder.Entity("Data.Models.ConditionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Parameters")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_ConditionTypeName")
                        .IsUnique();

                    b.ToTable("ConditionType", (string)null);
                });

            modelBuilder.Entity("Data.Models.Context", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Context", (string)null);
                });

            modelBuilder.Entity("Data.Models.ContextValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ChildValue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<long>("ContextId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ParentValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("Xmlorjson")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("XMLORJSON");

                    b.HasKey("Id");

                    b.HasIndex("ContextId");

                    b.ToTable("ContextValue", (string)null);
                });

            modelBuilder.Entity("Data.Models.CustomerPortalGlobalConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Announcement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterHtml")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FooterHTML");

                    b.Property<string>("HeaderHtml")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("HeaderHTML");

                    b.Property<string>("PortalCoverLogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortalLogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Title" }, "UQ_CustomerPortalGlobalConfig_Name")
                        .IsUnique();

                    b.ToTable("CustomerPortalGlobalConfig", (string)null);
                });

            modelBuilder.Entity("Data.Models.CustomField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("CustomField", (string)null);
                });

            modelBuilder.Entity("Data.Models.CustomFieldOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("ChildValueId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContextId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("CustomFieldId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsEnabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<long>("ParentValueId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.Property<long?>("Xmlorjsonid")
                        .HasColumnType("bigint")
                        .HasColumnName("XMLORJSONId");

                    b.HasKey("Id");

                    b.HasIndex("ChildValueId");

                    b.HasIndex("ContextId");

                    b.HasIndex("CustomFieldId");

                    b.HasIndex("ParentValueId");

                    b.ToTable("CustomFieldOption", (string)null);
                });

            modelBuilder.Entity("Data.Models.CustomFieldValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("CustomFieldId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomFieldOptionId")
                        .HasColumnType("bigint");

                    b.Property<long>("TicketId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldId");

                    b.HasIndex("CustomFieldOptionId");

                    b.HasIndex("TicketId");

                    b.ToTable("CustomFieldValue", (string)null);
                });

            modelBuilder.Entity("Data.Models.Directory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Directory")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UQ_DirectoryName")
                        .IsUnique();

                    b.ToTable("Directory", (string)null);
                });

            modelBuilder.Entity("Data.Models.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("DirectoryId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsAdminProvider")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLicenseProvider")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryId");

                    b.HasIndex(new[] { "Name" }, "UQ_GroupName")
                        .IsUnique();

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("Data.Models.GroupMembership", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembership", (string)null);
                });

            modelBuilder.Entity("Data.Models.NotificationBatch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAssociactedToAnyProject")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_NNotificationBatch_Name")
                        .IsUnique();

                    b.ToTable("NotificationBatch", (string)null);
                });

            modelBuilder.Entity("Data.Models.NotificationTo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_NotificationTo_Name")
                        .IsUnique();

                    b.ToTable("NotificationTo", (string)null);
                });

            modelBuilder.Entity("Data.Models.NotificationTrigger", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_NotificationTrigger_Name")
                        .IsUnique();

                    b.ToTable("NotificationTrigger", (string)null);
                });

            modelBuilder.Entity("Data.Models.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_Organization_Name")
                        .IsUnique();

                    b.ToTable("Organization", (string)null);
                });

            modelBuilder.Entity("Data.Models.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_Permission_Name")
                        .IsUnique();

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("Data.Models.PermissionBatch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAssociatedtoAnyProject")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_PermissionBatch_Name")
                        .IsUnique();

                    b.ToTable("PermissionBatch", (string)null);
                });

            modelBuilder.Entity("Data.Models.PermissionBatchMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("PermissionBatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionToId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PermissionBatchId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("PermissionToId");

                    b.ToTable("PermissionBatchMapping", (string)null);
                });

            modelBuilder.Entity("Data.Models.PermissionTo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_PermissionTo_Name")
                        .IsUnique();

                    b.ToTable("PermissionTo", (string)null);
                });

            modelBuilder.Entity("Data.Models.Postfunction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<long>("PostfunctionTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("TransitionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PostfunctionTypeId");

                    b.HasIndex("TransitionId");

                    b.ToTable("Postfunction", (string)null);
                });

            modelBuilder.Entity("Data.Models.PostFunctionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Parameters")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_PostFunctionName")
                        .IsUnique();

                    b.ToTable("PostFunctionType", (string)null);
                });

            modelBuilder.Entity("Data.Models.Priority", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PriorityColorHtmlcode")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("PriorityColorHTMLCode")
                        .IsFixedLength();

                    b.Property<long>("SequenceNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_PriorityName")
                        .IsUnique();

                    b.ToTable("Priority", (string)null);
                });

            modelBuilder.Entity("Data.Models.PriorityBatch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAssociatedToAnyProject")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_PriorityBatch_Name")
                        .IsUnique();

                    b.ToTable("PriorityBatch", (string)null);
                });

            modelBuilder.Entity("Data.Models.PriorityBatchAssociation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("PriorityBatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PriorityBatchId");

                    b.HasIndex("ProjectId");

                    b.ToTable("PriorityBatchAssociation", (string)null);
                });

            modelBuilder.Entity("Data.Models.PriorityBatchMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("PriorityBatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("PriorityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PriorityBatchId");

                    b.HasIndex("PriorityId");

                    b.ToTable("PriorityBatchMapping", (string)null);
                });

            modelBuilder.Entity("Data.Models.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long?>("DefaultAssignee")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<long?>("PreviousIssueId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProjectKey")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<long>("ProjectLead")
                        .HasColumnType("bigint");

                    b.Property<string>("ProjectLogoUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DefaultAssignee");

                    b.HasIndex("ProjectLead");

                    b.HasIndex(new[] { "ProjectKey" }, "UQ_ProjectKey")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UQ_Projectname")
                        .IsUnique();

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("Data.Models.ProjectRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_ProjectRoles_Name")
                        .IsUnique();

                    b.ToTable("ProjectRole", (string)null);
                });

            modelBuilder.Entity("Data.Models.Resolution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_Resolution_Name")
                        .IsUnique();

                    b.ToTable("Resolution", (string)null);
                });

            modelBuilder.Entity("Data.Models.Screen", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAssociatedToAnyBatch")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_Screen_Name")
                        .IsUnique();

                    b.ToTable("Screen", (string)null);
                });

            modelBuilder.Entity("Data.Models.ScreenBatch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Operation")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("ScreenId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ScreenId");

                    b.ToTable("ScreenBatch", (string)null);
                });

            modelBuilder.Entity("Data.Models.ScreenContent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("FieldId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScreenId")
                        .HasColumnType("bigint");

                    b.Property<long>("SequenceInScreen")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ScreenId");

                    b.ToTable("ScreenContents");
                });

            modelBuilder.Entity("Data.Models.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StatusCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_StatusName")
                        .IsUnique();

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("Data.Models.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AssigneeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("CurrentStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<long?>("PriorityId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReporterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ResolutionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)");

                    b.Property<long?>("TicketNumberForTheProject")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.Property<long>("WorkflowId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("CurrentStatusId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReporterId");

                    b.HasIndex("ResolutionId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("Data.Models.TicketEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_TicketEvent_Name")
                        .IsUnique();

                    b.ToTable("TicketEvent", (string)null);
                });

            modelBuilder.Entity("Data.Models.TicketSecurity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_TicketSecurity_Name")
                        .IsUnique();

                    b.ToTable("TicketSecurity", (string)null);
                });

            modelBuilder.Entity("Data.Models.TicketSecurityBatch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAssociatedToAnyProject")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_TicketSecurityBatchName")
                        .IsUnique();

                    b.ToTable("TicketSecurityBatch", (string)null);
                });

            modelBuilder.Entity("Data.Models.TicketType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_TicketType")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UQ_TicketTypeName")
                        .IsUnique();

                    b.ToTable("TicketType", (string)null);
                });

            modelBuilder.Entity("Data.Models.TicketTypeBatch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAssociatedtoAnyProject")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_Name")
                        .IsUnique();

                    b.ToTable("TicketTypeBatch", (string)null);
                });

            modelBuilder.Entity("Data.Models.TicketTypeBatchAssociation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TicketTypeBatchId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TicketTypeBatchId");

                    b.ToTable("TicketTypeBatchAssociation", (string)null);
                });

            modelBuilder.Entity("Data.Models.TicketTypeBatchMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("TicketTypeBatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("TicketTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("TicketTypeBatchId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("TicketTypeBatchMapping", (string)null);
                });

            modelBuilder.Entity("Data.Models.TicketTypeScreenBatch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAssociatedToAnyProject")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_TicketTypeScreenBatchName")
                        .IsUnique();

                    b.ToTable("TicketTypeScreenBatch", (string)null);
                });

            modelBuilder.Entity("Data.Models.TicketTypeScreenBatchMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("ScreenBatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("TicketTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ScreenBatchId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("TicketTypeScreenBatchMapping", (string)null);
                });

            modelBuilder.Entity("Data.Models.TicketTypeScreenBatchProjectMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TicketTypeScreenBatchId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TicketTypeScreenBatchId");

                    b.ToTable("TicketTypeScreenBatchProjectMapping", (string)null);
                });

            modelBuilder.Entity("Data.Models.TimeTracking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long?>("EstimatedTime")
                        .HasColumnType("bigint");

                    b.Property<string>("LogDescription")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<long?>("LoggedTime")
                        .HasColumnType("bigint");

                    b.Property<long?>("RemainingTime")
                        .HasColumnType("bigint");

                    b.Property<long>("TicketId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TimeLoggedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("TimeLoggedBy");

                    b.ToTable("TimeTracking", (string)null);
                });

            modelBuilder.Entity("Data.Models.Transition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<long>("FromStatusBoxId")
                        .HasColumnType("bigint");

                    b.Property<long>("FromStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("ToStatusBoxId")
                        .HasColumnType("bigint");

                    b.Property<long>("ToStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransitionScreenId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.Property<long>("WorkflowId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FromStatusId");

                    b.HasIndex("ToStatusId");

                    b.HasIndex("TransitionScreenId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Transition", (string)null);
                });

            modelBuilder.Entity("Data.Models.TransitionHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("FromStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("TicketId")
                        .HasColumnType("bigint");

                    b.Property<long>("ToStatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TransitionDate")
                        .HasColumnType("datetime");

                    b.Property<long>("TransitionedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FromStatusId");

                    b.HasIndex("TicketId");

                    b.HasIndex("ToStatusId");

                    b.HasIndex("TransitionedBy");

                    b.ToTable("TransitionHistory", (string)null);
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ActiveToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long?>("DirectoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsLicensed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonalAccessTokenCreated")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryId");

                    b.HasIndex(new[] { "EmailAddress" }, "UQ_User_EmailAddress")
                        .IsUnique();

                    b.HasIndex(new[] { "UserName" }, "UQ_User_UserName")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Data.Models.Validator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<long>("TransitionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.Property<long>("ValidatorTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TransitionId");

                    b.HasIndex("ValidatorTypeId");

                    b.ToTable("Validator", (string)null);
                });

            modelBuilder.Entity("Data.Models.ValidatorType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Parameters")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_ValidatorTypeName")
                        .IsUnique();

                    b.ToTable("ValidatorType", (string)null);
                });

            modelBuilder.Entity("Data.Models.Workflow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDraft")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_Workflow_Name")
                        .IsUnique();

                    b.ToTable("Workflow", (string)null);
                });

            modelBuilder.Entity("Data.Models.WorkflowBatch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAssociatedToAnyProject")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UQ_WorkflowBatch_Name")
                        .IsUnique();

                    b.ToTable("WorkflowBatch", (string)null);
                });

            modelBuilder.Entity("Data.Models.WorkflowBatchAssociation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.Property<long>("WorkflowBatchId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("WorkflowBatchId");

                    b.ToTable("WorkflowBatchAssociation", (string)null);
                });

            modelBuilder.Entity("Data.Models.WorkflowBatchMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<long>("TicketTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.Property<long>("WorkflowBatchId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkflowId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TicketTypeId");

                    b.HasIndex("WorkflowBatchId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("WorkflowBatchMapping", (string)null);
                });

            modelBuilder.Entity("Data.Models.WorkSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<short>("NoOfWorkingDaysPerWeek")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.Property<long>("WorkingHoursPerDay")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("WorkSchedule", (string)null);
                });

            modelBuilder.Entity("Data.Models.Comment", b =>
                {
                    b.HasOne("Data.Models.User", "CommentedByNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("CommentedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Comment_User");

                    b.HasOne("Data.Models.Ticket", "Ticket")
                        .WithMany("Comments")
                        .HasForeignKey("TicketId")
                        .IsRequired()
                        .HasConstraintName("FK_Comment_Ticket");

                    b.Navigation("CommentedByNavigation");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Data.Models.Condition", b =>
                {
                    b.HasOne("Data.Models.ConditionType", "ConditionType")
                        .WithMany("Conditions")
                        .HasForeignKey("ConditionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Condition_ConditionType");

                    b.HasOne("Data.Models.Transition", "Transition")
                        .WithMany("Conditions")
                        .HasForeignKey("TransitionId")
                        .IsRequired()
                        .HasConstraintName("FK_Condition_Transition");

                    b.Navigation("ConditionType");

                    b.Navigation("Transition");
                });

            modelBuilder.Entity("Data.Models.ContextValue", b =>
                {
                    b.HasOne("Data.Models.Context", "Context")
                        .WithMany("ContextValues")
                        .HasForeignKey("ContextId")
                        .IsRequired()
                        .HasConstraintName("FK_ContextValue_Context");

                    b.Navigation("Context");
                });

            modelBuilder.Entity("Data.Models.CustomFieldOption", b =>
                {
                    b.HasOne("Data.Models.ContextValue", "ChildValue")
                        .WithMany("CustomFieldOptionChildValues")
                        .HasForeignKey("ChildValueId")
                        .HasConstraintName("FK_CustomFieldOption_ContextValue_Child");

                    b.HasOne("Data.Models.Context", "Context")
                        .WithMany("CustomFieldOptions")
                        .HasForeignKey("ContextId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomFieldOption_Context");

                    b.HasOne("Data.Models.CustomField", "CustomField")
                        .WithMany("CustomFieldOptions")
                        .HasForeignKey("CustomFieldId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomFieldOption_CustomField");

                    b.HasOne("Data.Models.ContextValue", "ParentValue")
                        .WithMany("CustomFieldOptionParentValues")
                        .HasForeignKey("ParentValueId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomFieldOption_ContextValue_Parent");

                    b.Navigation("ChildValue");

                    b.Navigation("Context");

                    b.Navigation("CustomField");

                    b.Navigation("ParentValue");
                });

            modelBuilder.Entity("Data.Models.CustomFieldValue", b =>
                {
                    b.HasOne("Data.Models.CustomField", "CustomField")
                        .WithMany("CustomFieldValues")
                        .HasForeignKey("CustomFieldId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomFieldValue_CustomField");

                    b.HasOne("Data.Models.CustomFieldOption", "CustomFieldOption")
                        .WithMany("CustomFieldValues")
                        .HasForeignKey("CustomFieldOptionId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomFieldValue_CustomFieldOption");

                    b.HasOne("Data.Models.Ticket", "Ticket")
                        .WithMany("CustomFieldValues")
                        .HasForeignKey("TicketId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomFieldValue_Ticket");

                    b.Navigation("CustomField");

                    b.Navigation("CustomFieldOption");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Data.Models.Group", b =>
                {
                    b.HasOne("Data.Models.Directory", "Directory")
                        .WithMany("Groups")
                        .HasForeignKey("DirectoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Group_Directory");

                    b.Navigation("Directory");
                });

            modelBuilder.Entity("Data.Models.GroupMembership", b =>
                {
                    b.HasOne("Data.Models.Group", "Group")
                        .WithMany("GroupMemberships")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupMembership_Group");

                    b.HasOne("Data.Models.User", "User")
                        .WithMany("GroupMemberships")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupMembership_User");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Models.PermissionBatchMapping", b =>
                {
                    b.HasOne("Data.Models.PermissionBatch", "PermissionBatch")
                        .WithMany("PermissionBatchMappings")
                        .HasForeignKey("PermissionBatchId")
                        .IsRequired()
                        .HasConstraintName("FK_PermissionBatchMapping_PermissionBatch");

                    b.HasOne("Data.Models.Permission", "Permission")
                        .WithMany("PermissionBatchMappings")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK_PermissionBatchMapping_Permission");

                    b.HasOne("Data.Models.PermissionTo", "PermissionTo")
                        .WithMany("PermissionBatchMappings")
                        .HasForeignKey("PermissionToId")
                        .IsRequired()
                        .HasConstraintName("FK_PermissionBatchMapping_PermissionTo");

                    b.Navigation("Permission");

                    b.Navigation("PermissionBatch");

                    b.Navigation("PermissionTo");
                });

            modelBuilder.Entity("Data.Models.Postfunction", b =>
                {
                    b.HasOne("Data.Models.PostFunctionType", "PostfunctionType")
                        .WithMany("Postfunctions")
                        .HasForeignKey("PostfunctionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Postfunction_PostfunctionType");

                    b.HasOne("Data.Models.Transition", "Transition")
                        .WithMany("Postfunctions")
                        .HasForeignKey("TransitionId")
                        .IsRequired()
                        .HasConstraintName("FK_Postfunction_Transition");

                    b.Navigation("PostfunctionType");

                    b.Navigation("Transition");
                });

            modelBuilder.Entity("Data.Models.PriorityBatchAssociation", b =>
                {
                    b.HasOne("Data.Models.PriorityBatch", "PriorityBatch")
                        .WithMany("PriorityBatchAssociations")
                        .HasForeignKey("PriorityBatchId")
                        .IsRequired()
                        .HasConstraintName("FK_PriorityBatchAssociation_PriorityBatch");

                    b.HasOne("Data.Models.Project", "Project")
                        .WithMany("PriorityBatchAssociations")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_PriorityBatchAssociation_Project");

                    b.Navigation("PriorityBatch");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Data.Models.PriorityBatchMapping", b =>
                {
                    b.HasOne("Data.Models.PriorityBatch", "PriorityBatch")
                        .WithMany("PriorityBatchMappings")
                        .HasForeignKey("PriorityBatchId")
                        .IsRequired()
                        .HasConstraintName("FK_PriorityBatchMapping_PriorityBatch");

                    b.HasOne("Data.Models.Priority", "Priority")
                        .WithMany("PriorityBatchMappings")
                        .HasForeignKey("PriorityId")
                        .IsRequired()
                        .HasConstraintName("FK_PriorityBatchMapping_Priority");

                    b.Navigation("Priority");

                    b.Navigation("PriorityBatch");
                });

            modelBuilder.Entity("Data.Models.Project", b =>
                {
                    b.HasOne("Data.Models.User", "DefaultAssigneeNavigation")
                        .WithMany("ProjectDefaultAssigneeNavigations")
                        .HasForeignKey("DefaultAssignee")
                        .HasConstraintName("FK_Project_User_Assignee");

                    b.HasOne("Data.Models.User", "ProjectLeadNavigation")
                        .WithMany("ProjectProjectLeadNavigations")
                        .HasForeignKey("ProjectLead")
                        .IsRequired()
                        .HasConstraintName("FK_Project_User");

                    b.Navigation("DefaultAssigneeNavigation");

                    b.Navigation("ProjectLeadNavigation");
                });

            modelBuilder.Entity("Data.Models.ScreenBatch", b =>
                {
                    b.HasOne("Data.Models.Screen", "Screen")
                        .WithMany("ScreenBatches")
                        .HasForeignKey("ScreenId")
                        .IsRequired()
                        .HasConstraintName("FK_ScreenBatch_Screen");

                    b.Navigation("Screen");
                });

            modelBuilder.Entity("Data.Models.ScreenContent", b =>
                {
                    b.HasOne("Data.Models.Screen", "Screen")
                        .WithMany("ScreenContents")
                        .HasForeignKey("ScreenId")
                        .IsRequired()
                        .HasConstraintName("FK_ScreenContents_Screen");

                    b.Navigation("Screen");
                });

            modelBuilder.Entity("Data.Models.Ticket", b =>
                {
                    b.HasOne("Data.Models.User", "Assignee")
                        .WithMany("TicketAssignees")
                        .HasForeignKey("AssigneeId")
                        .HasConstraintName("FK_Ticket_User_Assignee");

                    b.HasOne("Data.Models.Status", "CurrentStatus")
                        .WithMany("Tickets")
                        .HasForeignKey("CurrentStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_Status");

                    b.HasOne("Data.Models.Priority", "Priority")
                        .WithMany("Tickets")
                        .HasForeignKey("PriorityId")
                        .HasConstraintName("FK_Ticket_Priority");

                    b.HasOne("Data.Models.Project", "Project")
                        .WithMany("Tickets")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_Project");

                    b.HasOne("Data.Models.User", "Reporter")
                        .WithMany("TicketReporters")
                        .HasForeignKey("ReporterId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_User_Reporter");

                    b.HasOne("Data.Models.Resolution", "Resolution")
                        .WithMany("Tickets")
                        .HasForeignKey("ResolutionId")
                        .HasConstraintName("FK_Ticket_Resolution");

                    b.HasOne("Data.Models.Workflow", "Workflow")
                        .WithMany("Tickets")
                        .HasForeignKey("WorkflowId")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_Workflow");

                    b.Navigation("Assignee");

                    b.Navigation("CurrentStatus");

                    b.Navigation("Priority");

                    b.Navigation("Project");

                    b.Navigation("Reporter");

                    b.Navigation("Resolution");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Data.Models.TicketTypeBatchAssociation", b =>
                {
                    b.HasOne("Data.Models.Project", "Project")
                        .WithMany("TicketTypeBatchAssociations")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_TicketTypeBatchAssociation_Project");

                    b.HasOne("Data.Models.TicketTypeBatch", "TicketTypeBatch")
                        .WithMany("TicketTypeBatchAssociations")
                        .HasForeignKey("TicketTypeBatchId")
                        .IsRequired()
                        .HasConstraintName("FK_TicketTypeBatchAssociation_TicketTypeBatch");

                    b.Navigation("Project");

                    b.Navigation("TicketTypeBatch");
                });

            modelBuilder.Entity("Data.Models.TicketTypeBatchMapping", b =>
                {
                    b.HasOne("Data.Models.TicketTypeBatch", "TicketTypeBatch")
                        .WithMany("TicketTypeBatchMappings")
                        .HasForeignKey("TicketTypeBatchId")
                        .IsRequired()
                        .HasConstraintName("FK_TicketTypeBatchMapping_TicketTypeBatch");

                    b.HasOne("Data.Models.TicketType", "TicketType")
                        .WithMany("TicketTypeBatchMappings")
                        .HasForeignKey("TicketTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_TicketTypeBatchMapping_TicketType");

                    b.Navigation("TicketType");

                    b.Navigation("TicketTypeBatch");
                });

            modelBuilder.Entity("Data.Models.TicketTypeScreenBatchMapping", b =>
                {
                    b.HasOne("Data.Models.Screen", "ScreenBatch")
                        .WithMany("TicketTypeScreenBatchMappings")
                        .HasForeignKey("ScreenBatchId")
                        .IsRequired()
                        .HasConstraintName("FK_TicketTypeScreenBatchMapping_Screen");

                    b.HasOne("Data.Models.TicketType", "TicketType")
                        .WithMany("TicketTypeScreenBatchMappings")
                        .HasForeignKey("TicketTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_TicketTypeScreenBatchMapping_TicketTypeBatch");

                    b.Navigation("ScreenBatch");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("Data.Models.TicketTypeScreenBatchProjectMapping", b =>
                {
                    b.HasOne("Data.Models.Project", "Project")
                        .WithMany("TicketTypeScreenBatchProjectMappings")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_TicketTypeScreenBatchProjectMapping_Project");

                    b.HasOne("Data.Models.TicketTypeScreenBatch", "TicketTypeScreenBatch")
                        .WithMany("TicketTypeScreenBatchProjectMappings")
                        .HasForeignKey("TicketTypeScreenBatchId")
                        .IsRequired()
                        .HasConstraintName("FK_TicketTypeScreenBatchProjectMapping_TicketTypeScreenBatch");

                    b.Navigation("Project");

                    b.Navigation("TicketTypeScreenBatch");
                });

            modelBuilder.Entity("Data.Models.TimeTracking", b =>
                {
                    b.HasOne("Data.Models.Ticket", "Ticket")
                        .WithMany("TimeTrackings")
                        .HasForeignKey("TicketId")
                        .IsRequired()
                        .HasConstraintName("FK_TimeTracking_Ticket");

                    b.HasOne("Data.Models.User", "TimeLoggedByNavigation")
                        .WithMany("TimeTrackings")
                        .HasForeignKey("TimeLoggedBy")
                        .HasConstraintName("FK_TimeTracking_User");

                    b.Navigation("Ticket");

                    b.Navigation("TimeLoggedByNavigation");
                });

            modelBuilder.Entity("Data.Models.Transition", b =>
                {
                    b.HasOne("Data.Models.Status", "FromStatus")
                        .WithMany("TransitionFromStatuses")
                        .HasForeignKey("FromStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Transition_Status_From");

                    b.HasOne("Data.Models.Status", "ToStatus")
                        .WithMany("TransitionToStatuses")
                        .HasForeignKey("ToStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Transition_Status_To");

                    b.HasOne("Data.Models.Screen", "TransitionScreen")
                        .WithMany("Transitions")
                        .HasForeignKey("TransitionScreenId")
                        .HasConstraintName("FK_Transition_Screen");

                    b.HasOne("Data.Models.Workflow", "Workflow")
                        .WithMany("Transitions")
                        .HasForeignKey("WorkflowId")
                        .IsRequired()
                        .HasConstraintName("FK_Transition_Workflow");

                    b.Navigation("FromStatus");

                    b.Navigation("ToStatus");

                    b.Navigation("TransitionScreen");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Data.Models.TransitionHistory", b =>
                {
                    b.HasOne("Data.Models.Status", "FromStatus")
                        .WithMany("TransitionHistoryFromStatuses")
                        .HasForeignKey("FromStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_TransitionHistory_Status_From");

                    b.HasOne("Data.Models.Ticket", "Ticket")
                        .WithMany("TransitionHistories")
                        .HasForeignKey("TicketId")
                        .IsRequired()
                        .HasConstraintName("FK_TransitionHistory_Ticket");

                    b.HasOne("Data.Models.Status", "ToStatus")
                        .WithMany("TransitionHistoryToStatuses")
                        .HasForeignKey("ToStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_TransitionHistory_Status_To");

                    b.HasOne("Data.Models.User", "TransitionedByNavigation")
                        .WithMany("TransitionHistories")
                        .HasForeignKey("TransitionedBy")
                        .IsRequired()
                        .HasConstraintName("FK_TransitionHistory_User");

                    b.Navigation("FromStatus");

                    b.Navigation("Ticket");

                    b.Navigation("ToStatus");

                    b.Navigation("TransitionedByNavigation");
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.HasOne("Data.Models.Directory", "Directory")
                        .WithMany("Users")
                        .HasForeignKey("DirectoryId")
                        .HasConstraintName("FK_User_Directory");

                    b.Navigation("Directory");
                });

            modelBuilder.Entity("Data.Models.Validator", b =>
                {
                    b.HasOne("Data.Models.Transition", "Transition")
                        .WithMany("Validators")
                        .HasForeignKey("TransitionId")
                        .IsRequired()
                        .HasConstraintName("FK_Validator_Transition");

                    b.HasOne("Data.Models.ValidatorType", "ValidatorType")
                        .WithMany("Validators")
                        .HasForeignKey("ValidatorTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Validator_ValidatorType");

                    b.Navigation("Transition");

                    b.Navigation("ValidatorType");
                });

            modelBuilder.Entity("Data.Models.WorkflowBatchAssociation", b =>
                {
                    b.HasOne("Data.Models.Project", "Project")
                        .WithMany("WorkflowBatchAssociations")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowBatchAssociation_Project");

                    b.HasOne("Data.Models.WorkflowBatch", "WorkflowBatch")
                        .WithMany("WorkflowBatchAssociations")
                        .HasForeignKey("WorkflowBatchId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowBatchAssociation_WorkflowBatch");

                    b.Navigation("Project");

                    b.Navigation("WorkflowBatch");
                });

            modelBuilder.Entity("Data.Models.WorkflowBatchMapping", b =>
                {
                    b.HasOne("Data.Models.TicketType", "TicketType")
                        .WithMany("WorkflowBatchMappings")
                        .HasForeignKey("TicketTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowBatchMapping_TicketType");

                    b.HasOne("Data.Models.WorkflowBatch", "WorkflowBatch")
                        .WithMany("WorkflowBatchMappings")
                        .HasForeignKey("WorkflowBatchId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowBatchMapping_WorkflowBatch");

                    b.HasOne("Data.Models.Workflow", "Workflow")
                        .WithMany("WorkflowBatchMappings")
                        .HasForeignKey("WorkflowId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowBatchMapping_Workflow");

                    b.Navigation("TicketType");

                    b.Navigation("Workflow");

                    b.Navigation("WorkflowBatch");
                });

            modelBuilder.Entity("Data.Models.ConditionType", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("Data.Models.Context", b =>
                {
                    b.Navigation("ContextValues");

                    b.Navigation("CustomFieldOptions");
                });

            modelBuilder.Entity("Data.Models.ContextValue", b =>
                {
                    b.Navigation("CustomFieldOptionChildValues");

                    b.Navigation("CustomFieldOptionParentValues");
                });

            modelBuilder.Entity("Data.Models.CustomField", b =>
                {
                    b.Navigation("CustomFieldOptions");

                    b.Navigation("CustomFieldValues");
                });

            modelBuilder.Entity("Data.Models.CustomFieldOption", b =>
                {
                    b.Navigation("CustomFieldValues");
                });

            modelBuilder.Entity("Data.Models.Directory", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Data.Models.Group", b =>
                {
                    b.Navigation("GroupMemberships");
                });

            modelBuilder.Entity("Data.Models.Permission", b =>
                {
                    b.Navigation("PermissionBatchMappings");
                });

            modelBuilder.Entity("Data.Models.PermissionBatch", b =>
                {
                    b.Navigation("PermissionBatchMappings");
                });

            modelBuilder.Entity("Data.Models.PermissionTo", b =>
                {
                    b.Navigation("PermissionBatchMappings");
                });

            modelBuilder.Entity("Data.Models.PostFunctionType", b =>
                {
                    b.Navigation("Postfunctions");
                });

            modelBuilder.Entity("Data.Models.Priority", b =>
                {
                    b.Navigation("PriorityBatchMappings");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Data.Models.PriorityBatch", b =>
                {
                    b.Navigation("PriorityBatchAssociations");

                    b.Navigation("PriorityBatchMappings");
                });

            modelBuilder.Entity("Data.Models.Project", b =>
                {
                    b.Navigation("PriorityBatchAssociations");

                    b.Navigation("TicketTypeBatchAssociations");

                    b.Navigation("TicketTypeScreenBatchProjectMappings");

                    b.Navigation("Tickets");

                    b.Navigation("WorkflowBatchAssociations");
                });

            modelBuilder.Entity("Data.Models.Resolution", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Data.Models.Screen", b =>
                {
                    b.Navigation("ScreenBatches");

                    b.Navigation("ScreenContents");

                    b.Navigation("TicketTypeScreenBatchMappings");

                    b.Navigation("Transitions");
                });

            modelBuilder.Entity("Data.Models.Status", b =>
                {
                    b.Navigation("Tickets");

                    b.Navigation("TransitionFromStatuses");

                    b.Navigation("TransitionHistoryFromStatuses");

                    b.Navigation("TransitionHistoryToStatuses");

                    b.Navigation("TransitionToStatuses");
                });

            modelBuilder.Entity("Data.Models.Ticket", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CustomFieldValues");

                    b.Navigation("TimeTrackings");

                    b.Navigation("TransitionHistories");
                });

            modelBuilder.Entity("Data.Models.TicketType", b =>
                {
                    b.Navigation("TicketTypeBatchMappings");

                    b.Navigation("TicketTypeScreenBatchMappings");

                    b.Navigation("WorkflowBatchMappings");
                });

            modelBuilder.Entity("Data.Models.TicketTypeBatch", b =>
                {
                    b.Navigation("TicketTypeBatchAssociations");

                    b.Navigation("TicketTypeBatchMappings");
                });

            modelBuilder.Entity("Data.Models.TicketTypeScreenBatch", b =>
                {
                    b.Navigation("TicketTypeScreenBatchProjectMappings");
                });

            modelBuilder.Entity("Data.Models.Transition", b =>
                {
                    b.Navigation("Conditions");

                    b.Navigation("Postfunctions");

                    b.Navigation("Validators");
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("GroupMemberships");

                    b.Navigation("ProjectDefaultAssigneeNavigations");

                    b.Navigation("ProjectProjectLeadNavigations");

                    b.Navigation("TicketAssignees");

                    b.Navigation("TicketReporters");

                    b.Navigation("TimeTrackings");

                    b.Navigation("TransitionHistories");
                });

            modelBuilder.Entity("Data.Models.ValidatorType", b =>
                {
                    b.Navigation("Validators");
                });

            modelBuilder.Entity("Data.Models.Workflow", b =>
                {
                    b.Navigation("Tickets");

                    b.Navigation("Transitions");

                    b.Navigation("WorkflowBatchMappings");
                });

            modelBuilder.Entity("Data.Models.WorkflowBatch", b =>
                {
                    b.Navigation("WorkflowBatchAssociations");

                    b.Navigation("WorkflowBatchMappings");
                });
#pragma warning restore 612, 618
        }
    }
}
